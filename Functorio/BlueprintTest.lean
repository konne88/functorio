import Functorio.Blueprint

open Blueprint

#guard generateWires 100 100 [
  ({x:=20, y:=20, type:=.pole} , 0)
] = []

-- Maximum distance on x-axis.
#guard generateWires 100 100 [
  ({x:=20, y:=20, type:=.pole} , 0),
  ({x:=29, y:=20, type:=.pole} , 1)
] = [
  (0,1)
]

-- Maximum distance on y-axis.
#guard generateWires 100 100 [
  ({x:=20, y:=20, type:=.pole} , 0),
  ({x:=20, y:=29, type:=.pole} , 1)
] = [
  (0,1)
]

-- Distance between poles is too large.
#guard generateWires 100 100 [
  ({x:=20, y:=20, type:=.pole} , 0),
  ({x:=30, y:=20, type:=.pole} , 1)
] = []

-- Diagonally
#guard generateWires 100 100 [
  ({x:=20, y:=20, type:=.pole} , 0),
  ({x:=24, y:=25, type:=.pole} , 1)
] = [
  (0,1)
]

-- Negative, max distance
#guard generateWires 100 100 [
  ({x:=20, y:=20, type:=.pole} , 0),
  ({x:=11, y:=20, type:=.pole} , 1)
] = [
  (0,1)
]

-- Negative, out of reach
#guard generateWires 100 100 [
  ({x:=20, y:=20, type:=.pole} , 0),
  ({x:=10, y:=20, type:=.pole} , 1)
] = []

-- Out of bounds is fine
#guard generateWires 6 1 [
  ({x:=0, y:=0, type:=.pole} , 0),
  ({x:=5, y:=0, type:=.pole} , 1)
] = [
  (0,1)
]

-- Big pole max distance, x-axis
#guard generateWires 100 100 [
  ({x:=50, y:=50, type:=.bigPole} , 0),
  ({x:=82, y:=50, type:=.bigPole} , 1)
] = [
  (0,1)
]

-- Big pole out of reach, x-axis
#guard generateWires 100 100 [
  ({x:=50, y:=50, type:=.bigPole} , 0),
  ({x:=83, y:=50, type:=.bigPole} , 1)
] = []

-- Big pole to medium pole, max distance
#guard generateWires 100 100 [
  ({x:=50, y:=50, type:=.bigPole} , 0),
  ({x:=59, y:=50, type:=.pole} , 1)
] = [
  (0,1)
]

-- Big pole to medium pole, out of reach
#guard generateWires 100 100 [
  ({x:=50, y:=50, type:=.bigPole} , 0),
  ({x:=60, y:=50, type:=.pole} , 1)
] = []

-- Medium pole to big pole, max distance
#guard generateWires 100 100 [
  ({x:=50, y:=50, type:=.pole} , 0),
  ({x:=59, y:=50, type:=.bigPole} , 1)
] = [
  (0,1)
]

-- Medium pole to big pole, out of reach
#guard generateWires 100 100 [
  ({x:=50, y:=50, type:=.pole} , 0),
  ({x:=60, y:=50, type:=.bigPole} , 1)
] = []

def printArea (x y w h : Nat) (area: Array (Int32 × Int32 × Int32)) := Id.run do
  let mut a := Vector.replicate w (Vector.replicate h ' ')

  for (_,dx,dy) in area do
    a := a.modify (x + dx).toNatClampNeg fun col => col.set! (y + dy).toNatClampNeg '*'

  return String.intercalate "\n" (a.toList.map fun inner => (String.mk inner.toList).trimRight)

#guard printArea (x:=10) (y:=10) (w:=21) (h:=21) mediumPoleArea = s!"
          *
         ***
        *****
       *******
      *********
     ***********
    *************
   ***************
  *****************
 ********* *********
  *****************
   ***************
    *************
     ***********
      *********
       *******
        *****
         ***
          *
"

#guard printArea (x:=35) (y:=35) (w:=71) (h:=71) bigPoleArea = s!"


                                   *
                                  ***
                                 *****
                                *******
                               *********
                              ***********
                             *************
                            ***************
                           *****************
                          *******************
                         *********************
                        ***********************
                       *************************
                      ***************************
                     *****************************
                    *******************************
                   *********************************
                  ***********************************
                 *************************************
                ***************************************
               *****************************************
              *******************************************
             *********************************************
            ***********************************************
           *************************************************
          ***************************************************
         *****************************************************
        *******************************************************
       *********************************************************
      ***********************************************************
     *************************************************************
    ***************************************************************
   ******************************** ********************************
    ***************************************************************
     *************************************************************
      ***********************************************************
       *********************************************************
        *******************************************************
         *****************************************************
          ***************************************************
           *************************************************
            ***********************************************
             *********************************************
              *******************************************
               *****************************************
                ***************************************
                 *************************************
                  ***********************************
                   *********************************
                    *******************************
                     *****************************
                      ***************************
                       *************************
                        ***********************
                         *********************
                          *******************
                           *****************
                            ***************
                             *************
                              ***********
                               *********
                                *******
                                 *****
                                  ***
                                   *


"

-- Medium pole chain
#guard generateWires 100 100 [
  ({x:=50, y:=50, type:=.pole} , 0),
  ({x:=52, y:=50, type:=.pole} , 1),
  ({x:=54, y:=50, type:=.pole} , 2),
  ({x:=56, y:=50, type:=.pole} , 3),
  ({x:=58, y:=50, type:=.pole} , 4),
] = [
  (0,1),
  (1,2),
  (2,3),
  (3,4),
]

-- Medium pole tree
#guard generateWires 100 100 [
  ({x:=50, y:=50, type:=.pole} , 0),
  ({x:=57, y:=50, type:=.pole} , 1),
  ({x:=59, y:=50, type:=.pole} , 2),
  ({x:=50, y:=58, type:=.pole} , 3),
  ({x:=50, y:=59, type:=.pole} , 4),
] = [
  (0,1),
  (1,2),
  (0,3),
  (3,4),
]
