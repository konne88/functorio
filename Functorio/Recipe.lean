import Functorio.Ingredient
import Functorio.Fraction

structure Recipe where
  name: Option String
  -- The `Fraction` indicates how many items are needed to execute the recipe.
  inputs : List (Fraction × Ingredient)
  -- The `Fraction` indicates how many output items are generated by executing the recipe.
  outputs : List (Fraction × Ingredient)
  -- Number of seconds that it takes the user to execute the recipe.
  time : Fraction

  deriving DecidableEq, Repr, Inhabited

inductive RecipeName
  -- Furnace products
  | copperPlate
  | ironPlate
  | steelPlate
  | stoneBrick

  -- Liquids
  | advancedOilProcessing
  | lightOilCracking
  | heavyOilCracking
  | lubricant
  | sulfuricAcid

  -- Intermediate products
  | ironGearWheel
  | copperCable
  | solidFuelFromLightOil
  | plasticBar
  | sulfur
  | ironStick
  | electronicCircuit -- green
  | advancedCircuit   -- red
  | processingUnit    -- blue
  | battery
  | engineUnit
  | electricEngineUnit
  | flyingRobotFrame
  | lowDensityStructure

  -- Buildings
  | inserter
  | transportBelt
  | pipe
  | rail
  | electricFurnace
  | productivityModule

  -- Military
  | firearmMagazine        -- yellow
  | piercingRoundsMagazine -- red
  | grenade
  | stoneWall

  -- Science Packs
  | automationSciencePack  -- red
  | logisticSciencePack    -- green
  | chemicalSciencePack    -- blue
  | militarySciencePack    -- black
  | productionSciencePack  -- purple
  | utilitySciencePack     -- yellow

  -- Aquilo
  | ammonia
  | icePlatform
  | solidFuelFromAmmonia
  | lithium
  | lithiumPlate
  | hotFluoroketone
  | coldFluoroketone
  | cryogenicSciencePack

  deriving DecidableEq, Repr, Inhabited

namespace RecipeName

def speedUp (recipeName:RecipeName) : Fraction :=
  match recipeName with
  -- furnance
  | .copperPlate
  | .ironPlate
  | .steelPlate
  | .stoneBrick
  | .lithiumPlate => 1

  -- refinery
  | .advancedOilProcessing => 1

  -- chemical plant
  | .lightOilCracking
  | .heavyOilCracking
  | .lubricant
  | .sulfuricAcid
  | .sulfur
  | .plasticBar
  | .battery => 1

  -- cryogenic plant
  | .ammonia
  | .lithium
  | .solidFuelFromAmmonia
  | .cryogenicSciencePack
  | .hotFluoroketone
  | .coldFluoroketone => 2

  -- assembly machine 3
  | .ironGearWheel
  | .copperCable
  | .solidFuelFromLightOil
  | .ironStick
  | .electronicCircuit
  | .advancedCircuit
  | .processingUnit
  | .engineUnit
  | .electricEngineUnit
  | .flyingRobotFrame
  | .lowDensityStructure
  | .inserter
  | .transportBelt
  | .pipe
  | .rail
  | .electricFurnace
  | .productivityModule
  | .firearmMagazine
  | .piercingRoundsMagazine
  | .grenade
  | .stoneWall
  | .automationSciencePack
  | .logisticSciencePack
  | .chemicalSciencePack
  | .militarySciencePack
  | .productionSciencePack
  | .utilitySciencePack
  | .icePlatform => 5/4

def getRecipe : RecipeName → Recipe
| .ammonia => {
    name := "ammonia",
    inputs := [(50, .ammoniacalSolution)],
    outputs := [(5, .ice), (50, .ammonia)],
    time := 1
}
| .icePlatform => {
    name := "icePlatform",
    inputs := [(400, .ammonia), (50, .ice)],
    outputs := [(1, .icePlatform)],
    time := 30
}
| .solidFuelFromAmmonia => {
    name := "??",
    inputs := [(15, .ammonia), (6, .crudeOil)],
    outputs := [(1, .solidFuel)],
    time := 1/2
}
| .lithium => {
    name := "lithium",
    inputs := [ (50, .ammonia), (50, .lithiumBrine), (1, .holmiumPlate)],
    outputs := [(5, .lithium)],
    time := 20
}
| .lithiumPlate => {
    name := "lithiumPlate",
    inputs := [(1, .lithium)],
    outputs := [(1, .lithiumPlate)],
    time := 64/10
}
| .hotFluoroketone => {
    name := "??",
    inputs := [(50, .ammonia), (50, .fluorine), (1, .solidFuel), (1, .lithium)],
    outputs := [(50, .hotFluoroketone)],
    time := 10
}
| .coldFluoroketone => {
    name := "??",
    inputs := [(10, .hotFluoroketone)],
    outputs := [(10, .coldFluoroketone)],
    time := 5
}
| .cryogenicSciencePack => {
    name := "cryogenicSciencePack",
    inputs := [(6, .coldFluoroketone), (3, .ice), (1, .lithiumPlate)],
    outputs := [(1, .cryogenicSciencePack), (3, .hotFluoroketone)],
    time := 20
}
| .sulfur => {
    name := "sulfur",
    inputs := [(30, .petroleumGas), (30, .water)],
    outputs := [(2, .sulfur)],
    time := 1
  }
| .copperPlate => {
    name := "copper-plate",
    inputs := [(1, .copperOre)],
    outputs := [(1, .copperPlate)],
    time := 8/5
  }
| .ironPlate => {
    name := "iron-plate",
    inputs := [(1, .ironOre)],
    outputs := [(1, .ironPlate)],
    time := 8/5
  }
| .steelPlate => {
    name := "steel-plate",
    inputs := [(5, .ironPlate)],
    outputs := [(1, .steelPlate)],
    time := 8
  }
| .stoneBrick => {
    name := "stone-brick",
    inputs := [(2, .stone)],
    outputs := [(1, .stoneBrick)],
    time := 16/5
  }
| .ironGearWheel => {
    name := "iron-gear-wheel",
    inputs := [(2, .ironPlate)],
    outputs := [(1, .ironGearWheel)],
    time := 1/2
  }
| .copperCable => {
    name := "copper-cable",
    inputs := [(1, .copperPlate)],
    outputs := [(2, .copperCable)],
    time := 1/2
  }
| .electronicCircuit => {
    name := "electronic-circuit",
    inputs := [(1, .ironPlate), (3, .copperCable)],
    outputs := [(1, .electronicCircuit)],
    time := 1/2
  }
| .advancedCircuit => {
    name := "advanced-circuit",
    inputs := [(4, .copperCable), (2, .electronicCircuit), (2, .plasticBar)],
    outputs := [(1, .advancedCircuit)],
    time := 6
  }
| .processingUnit => {
    name := "processing-unit",
    inputs := [(5, .sulfuricAcid), (20, .electronicCircuit), (2, .advancedCircuit)],
    outputs := [(1, .processingUnit)],
    time := 10
  }
| .engineUnit => {
    name := "engine-unit",
    inputs := [(1, .steelPlate), (1, .ironGearWheel), (2, .pipe)],
    outputs := [(1, .engineUnit)],
    time := 10
  }
| .electricEngineUnit => {
    name := "electric-engine-unit",
    inputs := [(15, .lubricant), (2, .electronicCircuit), (1, .engineUnit)],
    outputs := [(1, .electricEngineUnit)],
    time := 10
  }
| .flyingRobotFrame => {
    name := "flying-robot-frame",
    inputs := [(2, .battery), (1, .electricEngineUnit), (3, .electronicCircuit), (1, .steelPlate)],
    outputs := [(1, .flyingRobotFrame)],
    time := 20
  }
| .lowDensityStructure => {
    name := "low-density-structure",
    inputs := [(20, .copperPlate), (2, .steelPlate), (5, .plasticBar)],
    outputs := [(1, .lowDensityStructure)],
    time := 15
  }
| .battery => {
    name := "battery",
    inputs := [(20, .sulfuricAcid), (1, .copperPlate), (1, .ironPlate)],
    outputs := [(1, .battery)],
    time := 4
  }
| .plasticBar => {
    name := "plastic-bar",
    inputs := [(20, .petroleumGas), (1, .coal)],
    outputs := [(2, .plasticBar)],
    time := 1
  }
| .solidFuelFromLightOil => {
    name := "solid-fuel",
    inputs := [(10, .lightOil)],
    outputs := [(1, .solidFuel)],
    time := 2
  }
| .lubricant => {
    name := "lubricant",
    inputs := [(10, .heavyOil)],
    outputs := [(10, .lubricant)],
    time := 1
  }
| .inserter => {
    name := "inserter",
    inputs := [(1, .ironPlate), (1, .ironGearWheel), (1, .electronicCircuit)],
    outputs := [(1, .inserter)],
    time := 1/2
  }
| .transportBelt => {
    name := "transport-belt",
    inputs := [(1, .ironPlate), (1, .ironGearWheel)],
    outputs := [(2, .transportBelt)],
    time := 1/2
  }
| .pipe => {
    name := "pipe",
    inputs := [(1, .ironPlate)],
    outputs := [(1, .pipe)],
    time := 1/2
  }
| .stoneWall => {
    name := "stone-wall",
    inputs := [(5, .stoneBrick)],
    outputs := [(1, .stoneWall)],
    time := 1/2
  }
| .grenade => {
    name := "grenade",
    inputs := [(10, .coal), (5, .ironPlate)],
    outputs := [(1, .grenade)],
    time := 8
  }
| .rail => {
    name := "rail",
    inputs := [(1, .stone), (1, .ironStick), (1, .steelPlate)],
    outputs := [(2, .rail)],
    time := 1/2
  }
| .electricFurnace => {
    name := "electric-furnace",
    inputs := [(10, .stoneBrick), (10, .steelPlate), (5, .advancedCircuit)],
    outputs := [(1, .electricFurnace)],
    time := 5
  }
| .advancedOilProcessing => {
    name := "advanced-oil-processing",
    inputs := [(100, .crudeOil), (50, .water)],
    outputs := [ (55, .petroleumGas), (45, .lightOil), (25, .heavyOil)],
    time := 5
  }
| .heavyOilCracking => {
    name := "heavy-oil-cracking",
    inputs := [(40, .heavyOil), (30, .water)],
    outputs := [(30, .lightOil)],
    time := 2
  }
| .lightOilCracking => {
    name := "light-oil-cracking",
    inputs := [(30, .lightOil), (30, .water)],
    outputs := [(20, .petroleumGas)],
    time := 2
  }
| .sulfuricAcid => {
    name := "sulfuric-acid",
    inputs := [(100, .water), (1, .ironPlate), (5, .sulfur)],
    outputs := [(50, .sulfuricAcid)],
    time := 1
  }
| .firearmMagazine => {
    name := "firearm-magazine",
    inputs := [(4, .ironPlate)],
    outputs := [(1, .firearmMagazine)],
    time := 1
  }
| .piercingRoundsMagazine => {
    name := "piercing-rounds-magazine",
    inputs := [(2, .copperPlate), (1, .steelPlate), (2, .firearmMagazine)],
    outputs := [(2, .piercingRoundsMagazine)],
    time := 6
  }
| .productivityModule => {
    name := "productivity-module",
    inputs := [(5, .electronicCircuit), (5, .advancedCircuit)],
    outputs := [(1, .productivityModule)],
    time := 15
  }
| .ironStick => {
  name := "iron-stick",
  inputs := [(1, .ironPlate)],
  outputs := [(2, .ironStick)],
  time := 1/2
}
| .automationSciencePack => {
    name := "automation-science-pack",
    inputs := [(1, .copperPlate), (1, .ironGearWheel)],
    outputs := [(1, .automationSciencePack)],
    time := 5
  }
| .logisticSciencePack => {
    name := "logistic-science-pack",
    inputs := [(1, .inserter), (1, .transportBelt)],
    outputs := [(1, .logisticSciencePack)],
    time := 6
  }
| .chemicalSciencePack => {
    name := "chemical-science-pack",
    inputs := [(3, .advancedCircuit), (2, .engineUnit), (1, .sulfur)],
    outputs := [(2, .chemicalSciencePack)],
    time := 24
  }
| .militarySciencePack => {
    name := "military-science-pack",
    inputs := [(1, .grenade), (1, .piercingRoundsMagazine), (2, .stoneWall)],
    outputs := [(2, .militarySciencePack)],
    time := 10
  }
| .productionSciencePack => {
  name := "production-science-pack",
  inputs := [(1, .electricFurnace), (1, .productivityModule), (30, .rail)],
  outputs := [(3, .productionSciencePack)],
  time := 21
}
| .utilitySciencePack  => {
    name := "utility-science-pack",
    inputs := [(2, .processingUnit), (1, .flyingRobotFrame), (3, .lowDensityStructure)],
    outputs := [(3, .utilitySciencePack)],
    time := 21
  }

end RecipeName
